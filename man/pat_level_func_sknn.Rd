% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pat_level_func_sknn.R
\name{pat_level_func_sknn}
\alias{pat_level_func_sknn}
\title{Calculate bias, coverage and CI width for neighbors-based prediction for SKNN algorithm}
\usage{
pat_level_func_sknn(
  nearest,
  loocv = loocv,
  parallel = parallel,
  train_post = train_post,
  test_post = test_post,
  train = train,
  ref = ref,
  patid = patid,
  dist_fam = dist_fam,
  test = test,
  traintestmatchdf = traintestmatchdf,
  outcome = outcome,
  time_elapsed = time_elapsed,
  plot = plot,
  matchprobweight = matchprobweight,
  time_window = time_window,
  interval = interval,
  cs = cs,
  dfspec = dfspec,
  d_f_m = d_f_m,
  ptr_m = ptr_m,
  d_f_s = d_f_s,
  d_f_n = d_f_n,
  d_f_t = d_f_t,
  thresh_val = thresh_val,
  printtrace = printtrace,
  userchoose = userchoose,
  seed = seed,
  biasm = biasm
)
}
\arguments{
\item{nearest}{- Numeric vector indicating the nearest number of matches 
to select from. The \code{loocv_function} will iterate through 
the number within the vector and select the number of matches that has
optimal bias, coverage, and precision.
The number of nearest should be within the range of number of individuals
That are in the data. For example if there are 500 individuals in the data,
one could do \code{nearest <- 10:100}}

\item{loocv}{- Logical (\code{TRUE/FALSE}) that specifies whether 
or not to perform leave-one-out cross validation or just output 
predictions without hyperparameter tuning. If \code{loocv=FALSE}, then
users need to specify the value of the nearest}

\item{parallel}{- Number of cores used for the leave-one-out cross validation process. Default = 1}

\item{train_post}{- Data frame that contains the post-baseline observations from the training dataset. Typically this would be the \code{train_post} list component that was generated from the \code{\link{preproc}} function}

\item{test_post}{Data frame that contains the post-baseline observations from the testing dataset. Typically this would be the \code{train_post} list component that was generated from the \code{\link{preproc}} function}

\item{train}{Data frame. Specifically, full training data 
Generated using \code{\link{preproc}}. Example, \code{x <- preproc()}, 
then \code{x$test} would be used for this parameter.}

\item{ref}{- Fitted gamlss object from \code{\link{fitrefgamlss}}}

\item{patid}{Column name indicating patient id.}

\item{dist_fam}{- gamlss distribution specification using the \code{\link{gamlss.dist}} package. The specification for a normal distribution would be \code{gamlss.dist::NO}. For other distributions see \code{\link{gamlss.dist}}.}

\item{test}{Data frame. Specifically, full testing data}

\item{traintestmatchdf}{- Matched train test dataframe based on \code{\link{matchTestDataGen}}}

\item{outcome}{- Name of the outcomes variable (type=string)}

\item{time_elapsed}{- Name of the time variable. (type=string)}

\item{plot}{- Logical (\code{TRUE/FALSE}) that specifies whether to output individual precision plots}

\item{matchprobweight}{- Logical (\code{TRUE/FALSE}) that specifies whether to utilize probability sampling
when doing the mean matching. If TRUE, matches nearest n weighted on differnce in 
predicted outcome.}

\item{time_window}{- vector of numbers for `centiles.pred()`, `xvalues` argument. For example, specify such as \code{c(10:30)}}

\item{interval}{- Int value specifying the interval of individuals to skip}

\item{cs}{- Logical that specifies whether to use cubic spline. 
The default is set to \code{cs = FALSE}.}

\item{dfspec}{- Logical (\code{TRUE/FALSE}) that specifies whether to 
specify degrees of freedoms for the location, scale, and shape parameters
for the distribution specified with \code{dist_fam}.
Default value is \code{NULL}.}

\item{d_f_m}{- Numeric value that specifies the degrees of freedom for the cubic spline specified for the mean parameter of the distribution specified according to \code{dist_fam}}

\item{ptr_m}{- Numeric value that specifies the power transformation of time variable. Default value is 1.}

\item{d_f_s}{- Numeric value that specifies the degrees of freedom for the cubic spline specified for the scale parameter of the distribution specified according to \code{dist_fam}}

\item{d_f_n}{- Numeric value that specifies the degrees of freedom for the cubic spline specified for the shape parameter, specifically the \eqn{\nu} parameter, of the distribution specified according to \code{dist_fam}}

\item{d_f_t}{- Numeric value that specifies the degrees of freedom for the cubic spline specified for the shape parameter, specifically the \eqn{\tau} parameter, of the distribution specified according to \code{dist_fam}}

\item{thresh_val}{- Numeric value indicating value of bias to ignore (not include in output) in terms of the leave-one-out cross validation process. The default is set to \code{thresh_val = 10000}}

\item{printtrace}{- Logical (\code{TRUE/FALSE}) that specifies printing of gamlss parameter estimation process within the \code{\link{gamlss}} function}

\item{userchoose}{- Int value indicating the choice that the user wants to use for the number of nearest matches}

\item{seed}{- Seed for probability sampling of the nearest matches}

\item{biasm}{- Column indicating which bias measure to use for 
choosing the optimal nearest number of neighbors. 
Default is \code{'raw'}. Options: \code{'raw','rmse','zsc'}.}
}
\value{
Returns a list of 3 lists and a value. 1) \code{pred_res} contains a list of predicted values for the training data (\code{pred_train}) and test data (\code{pred_test}), the performance (\code{bias},\code{rmse},\code{zscore},\code{iqrcoverage},\code{precisionvec}, and number of dropped cases in fitting the gamlss model(\code{dropped_cases})); 2) \code{loocv_res} contains the same lists described above for each models fitted using different values of number of nearest neighbors; 3) \code{loocv_score} contains the summarised performance measures as a data frame; 4) \code{nearest} contains the optimal number of matches based on the aggregate performance metric.
}
\description{
The function calculate three frequency-based parameters to 
demonstate statistical quality of the neighbors-based prediction.  #' The parameters are bias, coverage and the 50% prediction interval 
width.
}
